#!/usr/bin/env node

var commander = require('commander'),
    buildtools = require('../'),
    curPath = process.cwd();

commander
  .description("Run the development server")
  .option("-d, --daemonize", "runs as a daemon")
  .option("-a, --local-only [true/false]", "sets whether the server should run localOnly (overrides the project setting)")
  .option("-p, --port [port]", "sets the port the server should listen on (overrides the project setting)")
  .option("-r, --repl", "open a repl to the buildtools")
  .option("-b, --run-benchmarks", "run benchmarks on the buildtools")
  .option("-c, --config-file <path>", "the server configuration file to use", "sc_config")
  .option("-e, --env <env>", "the environment name", "dev")

  .option("--trace", "set the execution log level to trace")
  .option("-v, --debug", "set the execution log level to debug")
  .option("--warn", "set the execution log level to warn")
  .option("--error", "set the execution log level to error")
  .option("--silent", "set the execution log level to none")
  .option("-l, --log-file [path]", "save the log to a file [serve.log]")

  .option("-t, --include-tests", "force inclusion of the tests")
  .option("-o, --output-files [path]", "save the built files in a directory [debug_output])")
  .option("--disable-bt-feedback", "Do not use the feedback system to the browser")
  .parse(process.argv);

//var opts = commander.args;

buildtools.startDevServer(curPath, {
  daemonize: commander.daemonize,
  hasREPL: commander.repl,
  runBenchmarks: commander.runBenchmarks,
  outputFiles: commander.outputFiles,
  configFile: commander.configFile,
  envName: commander.env,
  logFile: commander.logFile,
  logLevel: commander.trace ? "trace" : commander.debug ? "debug" : commander.warn ? "warn" : commander.error ? "error" : commander.silent ? "none" : "info",
  localOnly: commander.localOnly,
  port: commander.port,
  includeTests: commander.includeTests,
  disableSocket: commander.disableBtFeedback
});
