#!/usr/bin/env node

var util = require('util'),
    path = require('path'),
    args = process.argv,
    curPath = process.cwd(),
    buildtools = require('../index'),
    commander = require('commander');
    //command = args[2],
    // hasREPL = args.indexOf("--repl") > 1,
    // hasDebugServer = args.indexOf("--debug-server") > 1,
    // runBenchmarks = args.indexOf("--run-benchmarks") > 1,
    // runtype,
    // app = (command === "build")? args[3]: null;

commander.version("0.0.1").usage("[cmd] [args]");


commander.command("install [git-repo]")
  .description("Install a framework in the project or globally")
  .option("--global", "save the framework to the buildtools global frameworks folder")
  .option("--branch [branch]", "check out a specific branch of the repository")
  .option("--silent", "suppress any messages during install")
  .action( function (gitrepo, opts){
    if (!gitrepo) {
      util.puts("You must provide a git url as first option");
    }
    else {
      buildtools.startInstall(curPath, {
        gitUrl: gitrepo,
        isGlobal: opts.global,
        branch: opts.branch,
        isSilent: opts.silent
      });
    }
  });

commander.command("serve")
  .description("run the development server")
  .option("-d, --debug-server", "save the result of the dev-server build to tmpdebug folder")
  .option("-r, --repl", "open a repl to the buildtools")
  .option("--run-benchmarks", "run benchmarks on the buildtools")
  .option("--log-level [level]", "execution log level [debug, info, warn, error, none]", 'info')

  .action( function(opts) {
    //util.log("opts for serve:" + util.inspect(opts));
    buildtools.startDevServer(curPath, {
      runBenchmarks: opts.runBenchmarks,
      hasREPL: opts.repl,
      hasDebugServer: opts.debugServer,
      logLevel: opts.logLevel
    });
  });


commander.command("build [apps]")
  .description("run a build. When apps is omitted, all apps will be built. Provide a comma separated list to build specific apps. (app1,app2)")
  .option("--run-benchmarks", "run benchmarks on the saving process")
  .option("--log-level [level]", "execution log level [debug, info, warn, error, none]", 'info')
  .option("--repl", "don't quit after build, but start a repl")
  .action( function(appOne, opts) {
    var o = {
      apps: [],
      runBenchmarks: opts.runBenchmarks,
      logLevel: opts.logLevel,
      REPL: opts.repl
    };
    if (appOne) {
      if (appOne.indexOf(",")) o.apps = appOne.split(",");
      else o.apps.push(appOne);
    }
    // util.log("app: " + appOne);
    // util.log("opts: " + util.inspect(opts));
    // //buildtools.startSave(curPath, opts);
    buildtools.startBuild(curPath, o);
  });

commander.parse(process.argv);
// util.puts("Sproutcore NodeJS BuildTools v0.0.1");
// util.puts("");

// function startDevServer () {
//   buildtools.startDevServer(curPath, { hasREPL: hasREPL, hasDebugServer: hasDebugServer, runBenchmarks: runBenchmarks });
// };

// switch (command) {
//   case "save": buildtools.startSave(curPath); break;
//   case "install":
//   case "server": startDevServer(); break;
//   default: startDevServer();
// }

//util.log("args: " + util.inspect(args));
